#!/bin/bash
set -e


IFNAME=$1
GUESTNAME=$2
IPADDR=$3
MACADDR=$4


[ "$IPADDR" ] || {
    echo "Syntax:"
    echo "pipework <hostinterface> <guest> <ipaddr>/<subnet>[@default_gateway] [macaddr]"
    echo "pipework <hostinterface> <guest> dhcp [macaddr]"
    exit 1
}

[ "$(which ovs-vsctl >/dev/null) && $(ovs-vsctl list-br|grep -q ^$IFNAME$)" ] || {
        echo "Sorry only openvswitch is supported"
        exit 1
    }

if which docker >/dev/null
	then
        DOCKERPID=$(docker inspect --format='{{ .State.Pid }}' $GUESTNAME)
        [ "$DOCKERPID" = "<no value>" ] && {
        echo "Container $GUESTNAME not found, and unknown to Docker."
        exit 1
        }
	else
	    echo "Container $GUESTNAME not found, and Docker not installed."
	    exit 1
    fi


if [ "$IPADDR" = "dhcp" ]
then
    # We use udhcpc to obtain the DHCP lease, make sure it's installed.
    which udhcpc >/dev/null || {
	echo "You asked for DHCP; please install udhcpc first."
	exit 1
    }
else
    # Check if a subnet mask was provided.
    echo $IPADDR | grep -q / || {
	echo "The IP address should include a netmask."
	echo "Maybe you meant $IPADDR/24 ?"
	exit 1
    }
    # Check if a gateway address was provided.
    if echo $IPADDR | grep -q @
    then
        GATEWAY=$(echo $IPADDR | cut -d@ -f2)
        IPADDR=$(echo $IPADDR | cut -d@ -f1)
    else
        GATEWAY=
    fi
fi


if [ $DOCKERPID ]; then
   NSPID=$DOCKERPID
else
       echo "Could not find a process inside container $GUESTNAME."
       exit 1
fi

# Create named namespace
mkdir -p /var/run/netns
rm -f /var/run/netns/$NSPID
ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID

# Create internal port for our container

GUEST_IFNAME=do${NSPID}eth
ovs-vsctl add-port $IFNAME $GUEST_IFNAME 
ovs-vsctl set Interface $GUEST_IFNAME type=internal

# Move link to target namespace 
ip link set $GUEST_IFNAME netns $NSPID

# Set IP/DHCP
[ "$MACADDR" ] && ip netns exec $NSPID ip link set $GUEST_IFNAME address $MACADDR
if [ "$IPADDR" = "dhcp" ]
then
    ip netns exec $NSPID udhcpc -qi $GUEST_IFNAME
else
    ip netns exec $NSPID ip link set dev $GUEST_IFNAME up
    ip netns exec $NSPID ip addr add $IPADDR dev $GUEST_IFNAME
    [ "$GATEWAY" ] && {
    ip netns exec $NSPID ip route delete default >/dev/null 2>&1 && true
    ip netns exec $NSPID ip route replace default via $GATEWAY
    }
fi

#Give our ARP neighbors a nudge about the new interface
if which arping > /dev/null 2>&1
then
    IPADDR=$(echo $IPADDR | cut -d/ -f1) 
    ip netns exec $NSPID arping -c 1 -A -I $GUEST_IFNAME $IPADDR > /dev/null 2>&1
else
    echo "Warning: arping not found; interface may not be immediately reachable"
fi
exit 0
